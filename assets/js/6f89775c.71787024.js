(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{124:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(r),b=n,m=u["".concat(i,".").concat(b)]||u[b]||p[b]||o;return r?a.a.createElement(m,c(c({ref:t},l),{},{components:r})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},95:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return d}));var n=r(3),a=r(7),o=(r(0),r(124)),i={id:"utilities",title:"Utilities",custom_edit_url:"https://github.com/lucasgmagalhaes/corde/blob/master/docs/Utilities.mdx"},c={unversionedId:"utilities",id:"utilities",isDocsHomePage:!1,title:"Utilities",description:"Utility functions are used to complement the communication between corde and Discord,",source:"@site/../docs/Utilities.mdx",slug:"/utilities",permalink:"/docs/utilities",editUrl:"https://github.com/lucasgmagalhaes/corde/blob/master/docs/Utilities.mdx",version:"current",lastUpdatedBy:"Lucas Magalh\xe3es",lastUpdatedAt:1617296153,formattedLastUpdatedAt:"4/1/2021",sidebar:"docs",previous:{title:"Clausures",permalink:"/docs/clausures"},next:{title:"Colors",permalink:"/docs/colors"}},s=[{value:"sendMessage(string | number | MessageEmbed)",id:"sendmessagestring--number--messageembed",children:[]},{value:"createRole(RoleData)",id:"createroleroledata",children:[]},{value:"getRole(RoleIdentifier)",id:"getroleroleidentifier",children:[]}],l={toc:s};function d(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Utility functions are used to complement the communication between corde and Discord,\nit provides just a few functions to iterate tests with Discord using corde's bot or your self bot."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/docs/utilities#sendMessage"},Object(o.b)("inlineCode",{parentName:"a"},"sendMessage(message)"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/docs/utilities#createroleroledata"},Object(o.b)("inlineCode",{parentName:"a"},"createRole(roleData)"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"/docs/utilities#getroleroleidentifier"},Object(o.b)("inlineCode",{parentName:"a"},"getRole(roleIndentifier)")))),Object(o.b)("h3",{id:"sendmessagestring--number--messageembed"},"sendMessage(string | number | MessageEmbed)"),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"sendMessage")," to send a message as ",Object(o.b)("strong",{parentName:"p"},"corde bot"),". This is useful if you do not want to depend directly on ",Object(o.b)("inlineCode",{parentName:"p"},"expect")," to wait for corde to send a message."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},'const message = await corde.sendMessage("Hi Frodo!");\n')),Object(o.b)("h3",{id:"createroleroledata"},"createRole(RoleData)"),Object(o.b)("p",null,"Creates a new role to the guild provided in configs."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},'const role = await corde.createRole({\n  name: "role Banana",\n});\n')),Object(o.b)("h3",{id:"getroleroleidentifier"},"getRole(RoleIdentifier)"),Object(o.b)("p",null,"Finds a role in config guild's cache, basing on its ",Object(o.b)("strong",{parentName:"p"},"id")," or ",Object(o.b)("strong",{parentName:"p"},"name"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},'const role = corde.getRole("123124");\nconst role = corde.getRole({ id: "1231241" });\nconst role = corde.getRole({ name: "role Banana" });\n')))}d.isMDXComponent=!0}}]);