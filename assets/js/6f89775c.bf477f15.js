(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2153],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return r?n.createElement(f,a(a({ref:t},d),{},{components:r})):n.createElement(f,a({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1477:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var n=r(2122),o=r(9756),i=(r(7294),r(3905)),a={id:"utilities",title:"Utilities",custom_edit_url:"https://github.com/cordejs/corde/blob/master/docs/Utilities.mdx"},s={unversionedId:"utilities",id:"utilities",isDocsHomePage:!1,title:"Utilities",description:"Utility functions are used to complement the communication between corde and Discord,",source:"@site/../docs/Utilities.mdx",sourceDirName:".",slug:"/utilities",permalink:"/docs/utilities",editUrl:"https://github.com/cordejs/corde/blob/master/docs/Utilities.mdx",version:"current",lastUpdatedBy:"Lucas Magalh\xe3es",lastUpdatedAt:1619011341,formattedLastUpdatedAt:"4/21/2021",frontMatter:{id:"utilities",title:"Utilities",custom_edit_url:"https://github.com/cordejs/corde/blob/master/docs/Utilities.mdx"},sidebar:"docs",previous:{title:"Debug",permalink:"/docs/debug"},next:{title:"Colors",permalink:"/docs/colors"}},l=[{value:"sendMessage(string | number | MessageEmbed)",id:"sendmessagestring--number--messageembed",children:[]},{value:"createRole(RoleData)",id:"createroleroledata",children:[]},{value:"getRole(RoleIdentifier)",id:"getroleroleidentifier",children:[]}],c={toc:l};function d(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Utility functions are used to complement the communication between corde and Discord,\nit provides just a few functions to iterate tests with Discord using corde's bot or your self bot."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/utilities#sendMessage"},(0,i.kt)("inlineCode",{parentName:"a"},"sendMessage(message)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/utilities#createroleroledata"},(0,i.kt)("inlineCode",{parentName:"a"},"createRole(roleData)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/utilities#getroleroleidentifier"},(0,i.kt)("inlineCode",{parentName:"a"},"getRole(roleIndentifier)")))),(0,i.kt)("h3",{id:"sendmessagestring--number--messageembed"},"sendMessage(string | number | MessageEmbed)"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"sendMessage")," to send a message as ",(0,i.kt)("strong",{parentName:"p"},"corde bot"),". This is useful if you do not want to depend directly on ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," to wait for corde to send a message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const message = await corde.sendMessage("Hi Frodo!");\n')),(0,i.kt)("h3",{id:"createroleroledata"},"createRole(RoleData)"),(0,i.kt)("p",null,"Creates a new role to the guild provided in configs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const role = await corde.createRole({\n  name: "role Banana",\n});\n')),(0,i.kt)("h3",{id:"getroleroleidentifier"},"getRole(RoleIdentifier)"),(0,i.kt)("p",null,"Finds a role in config guild's cache, basing on its ",(0,i.kt)("strong",{parentName:"p"},"id")," or ",(0,i.kt)("strong",{parentName:"p"},"name"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const role = corde.getRole("123124");\nconst role = corde.getRole({ id: "1231241" });\nconst role = corde.getRole({ name: "role Banana" });\n')))}d.isMDXComponent=!0}}]);